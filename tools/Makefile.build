src := $(obj)

PHONY = __build
__build:

# Initialize variables
obj-y :=
extra-y :=
subdir-y :=
targets :=

include tools/Makefile.include

kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
include $(kbuild-file)

include tools/Makefile.lib

builtin-target := $(obj)/built-in.o

cmd_link_o_target = $(if $(strip $(obj-y)),\
		      $(LD) $(LDFLAGS) -r -o $@ $(filter $(obj-y), $^), \
		      rm -f $@; $(AR) rcs$(KBUILD_ARFLAGS) $@)

quiet_cmd_cc_o_cxx = CXX $@
cmd_cc_o_cxx = $(CXX) $(CXXFLAGS) -c -o $@ $<
define rule_cc_o_cxx
	$(call echo-cmd,cc_o_cxx)
endef

$(builtin-target): $(obj-y)
	$(call if_changed,link_o_target)

$(obj)/%.o: $(src)/%.cc
	$(call if_changed,cc_o_cxx)

$(obj)/%.o: $(src)/%.asm
	@$(ASM) $(ASMFLAGS) -o $@ $<

$(obj)/%.lds: $(src)/%.lds.S
	@$(CXX) $(CXXFLAGS) -x c++ -E $< -o $@

$(sort $(subdir-obj-y)): $(subdir-ym) ;

PHONY += $(subdir-ym)
$(subdir-ym):
	@$(Q)$(MAKE) $(build)=$@

__build: $(builtin-target) $(subdir-ym) $(extra-y)
	@:

targets += $(builin-target) $(obj-y) $(extra-y)
targets := $(filter-out $(PHONY), $(targets))

cmd_files := $(wildcard $(foreach f,$(sort $(targets)),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif

PHONY += FORCE
FORCE:

.PHONY: $(PHONY)